// AudioPlayer.swift
// Generated by ChatGPT

import AVFoundation
import Combine

class AudioPlayer: ObservableObject {
    static let shared = AudioPlayer()

    private var audioPlayer: AVAudioPlayer?

    @Published var isPlaying: Bool = false

    private init() {
        setupAudioPlayer()

        NotificationCenter.default.addObserver(self, selector: #selector(handleInterruption), name: AVAudioSession.interruptionNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(handleRouteChange), name: AVAudioSession.routeChangeNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(handleMediaServicesReset), name: AVAudioSession.mediaServicesWereResetNotification, object: nil)
    }

    private func setupAudioPlayer() {
        guard let audioPath = Bundle.main.path(forResource: "Sounds/music", ofType: "mp3") else {
            print("Audio file not found")
            return
        }

        do {
            audioPlayer = try AVAudioPlayer(contentsOf: URL(fileURLWithPath: audioPath))
            audioPlayer?.numberOfLoops = -1 // Loop indefinitely
            try AVAudioSession.sharedInstance().setCategory(.ambient, mode: .default, options: [])
            try AVAudioSession.sharedInstance().setActive(true)
        } catch {
            print("Error initializing audio player: \(error)")
        }
    }

    func togglePlayback() {
        if let player = audioPlayer {
            if player.isPlaying {
                player.pause()
            } else {
                player.play()
            }
            isPlaying = player.isPlaying
        }
    }

    @objc func handleInterruption(notification: Notification) {
        if let userInfo = notification.userInfo,
           let typeValue = userInfo[AVAudioSessionInterruptionTypeKey] as? UInt,
           let type = AVAudioSession.InterruptionType(rawValue: typeValue) {
            switch type {
            case .began:
                audioPlayer?.pause()
            case .ended:
                try? AVAudioSession.sharedInstance().setActive(true)
                audioPlayer?.play()
            }
        }
    }

    @objc func handleRouteChange(notification: Notification) {
        if let userInfo = notification.userInfo,
           let reasonValue = userInfo[AVAudioSessionRouteChangeReasonKey] as? UInt,
           let reason = AVAudioSession.RouteChangeReason(rawValue: reasonValue) {
            switch reason {
            case .oldDeviceUnavailable:
                audioPlayer?.pause()
            default:
                break
            }
        }
    }

    @objc func handleMediaServicesReset(notification: Notification) {
        setupAudioPlayer()
    }
}
